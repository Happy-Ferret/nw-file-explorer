var events = require("events");
var fs = require('fs');
var path = require('path');
var jade = require('jade');
var _ = require('underscore');
var util = require("util");

// Get supported icons of types
var avaliable_types = [];
{
  var files = fs.readdirSync('icons');
  for (i in files) {
    avaliable_types.push(path.basename(files[i], '.png'));
  }
}

// Template engine
var gen_files_view = jade.compile([
    '- each file in files',
    '  .file(data-path="#{file.path}")',
    '    .icon',
    '      img(src="icons/#{file.type}.png")',
    '    .name #{file.name}',
].join('\n'));

// Dig out file's information
function file_mine(filepath) {
  var result = {
    name: path.basename(filepath),
    path: filepath,
  };

  var stat = fs.statSync(filepath);
  if (stat.isDirectory()) {
    result.type = 'folder';
  } else {
    var ext = path.extname(filepath).substr(1);
    if (_.include(avaliable_types, ext))
      result.type = ext;
    else
      result.type = 'blank';
  }

  return result;
}

// Our type
function Folder(jquery_element) {
  events.EventEmitter.call(this);
  this.element = jquery_element;

  var self = this;
  this.element.delegate('.file', 'click', function() {
    self.element.children('.focus').removeClass('focus');
    $(this).addClass('focus');
  });
  this.element.delegate('.file', 'dblclick', function() {
    var file_path = $(this).attr('data-path');
    self.emit('navigate', file_path, file_mine(file_path));
  });
}

util.inherits(Folder, events.EventEmitter);

Folder.prototype.open = function(dir) {
  var self = this;
  fs.readdir(dir, function(error, files) {
    for (var i = 0; i < files.length; ++i) {
      files[i] = file_mine(path.join(dir, files[i]));
    }

    self.element.html(gen_files_view({ files: files }));
  });
}

exports.Folder = Folder; 
